{"version":3,"names":[],"mappings":"","sources":["menu-bookmarks.js"],"sourcesContent":["'use strict'\n\nlet i18n = require('./i18n.min')\n\nconst {\n\tapp,\n\tBrowserWindow,\n\tMenu,\n\tMenuItem,\n\tipcMain,\n\tshell,\n\tclipboard\n} = require( 'electron' )\n\nconst dialog \t\t= require( 'electron' ).dialog\nconst Store \t\t= require( 'electron-store' )\nconst store \t\t= new Store()\nconst applescript \t= require( 'applescript' )\n\n\n\n//note(dgmid): decodeentities\n\nfunction decodeEntities( str ) {\n\t\n\treturn \tString(str)\n\t\t.replace(/&lt;/g, '<')\n\t\t.replace(/&gt;/g, '>')\n}\n\n\n\nipcMain.on('show-bookmark-menu', ( event, message ) => {\n\t\n\tlet title = decodeEntities( message[1] )\n\t\n\tconst bookmarkMenuTemplate = [\n\t\t{\n\t\t\tlabel: i18n.t('menubookmarks:open', 'Open {{title}} in Default Browser', { title: title }),\n\t\t\tclick () { require('electron').shell.openExternal( message[3] ) }\n\t\t},\n\t\t{\n\t\t\tlabel: i18n.t('menubookmarks:with', 'Open {{title}} with…', { title: title }),\n\t\t\tsubmenu: []\n\t\t},\n\t\t{\n\t\t\tlabel: i18n.t('menubookmarks:copy', 'Copy {{title}} url to Clipboard', { title: title }),\n\t\t\tclick () { clipboard.writeText(message[3], title) }\t\n\t\t},\n\t\t{\n\t\t\ttype: 'separator'\n\t\t},\n\t\t{\n\t\t\tlabel: i18n.t('menubookmarks:edit', 'Edit {{title}} Bookmark…', { title: title }),\n\t\t\tclick (item, focusedWindow) { if(focusedWindow) focusedWindow.webContents.send('edit-bookmark', message) }\n\t\t},\n\t\t{\n\t\t\tlabel: `Delete ${title} Bookmark…`,\n\t\t\tlabel: i18n.t('menubookmarks:delete', 'Delete {{title}} Bookmark…', { title: title }),\n\t\t\tclick (item, focusedWindow) { if(focusedWindow) focusedWindow.webContents.send('delete-bookmark', message) }\n\t\t\t\n\t\t},\n\t]\n\t\n\tconst browsers = store.get('browsers')\n\t\n\tfor (let i = 0, len = browsers.length; i < len; i++) {\n\t\t\n\t\tlet theBrowser = browsers[i]['name']\n\t\t\n\t\tlet launchScript =\n\t\t\n\t\t`tell application \"${theBrowser}\"\n\t\t\topen location \"${message[3]}\"\n\t\tend tell\n\t\ttell application \"System Events\"\n\t\t\ttell application process \"${theBrowser}\"\n\t\t\tset frontmost to true\n\t\t\tend tell\n\t\tend tell`\n\t\t\n\t\tbookmarkMenuTemplate[1].submenu.push({\n\t\t\t\tlabel: theBrowser,\n\t\t\t\tclick () {\n\t\t\t\t\t\n\t\t\t\t\tapplescript.execString(launchScript, function(err, rtn) {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tdialog.showErrorBox(\n\t\t\t\t\t\t\t\ti18n.t('menubookmarks:errorbox.title', 'Error launching: {{browser}}', { browser: theBrowser }),\n\t\t\t\t\t\t\t\ti18n.t('menubookmarks:errorbox.content', 'the url {{url}} could not be opened', { url: message[3] })\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tconsole.log( err )\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t)\n\t}\n\t\n\tconst bookmarkMenu = Menu.buildFromTemplate( bookmarkMenuTemplate )\n\t\n\tconst win = BrowserWindow.fromWebContents( event.sender )\n\tbookmarkMenu.popup( win )\n})\n"],"file":"../menu-bookmarks.min.js"}