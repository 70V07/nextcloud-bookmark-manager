{"version":3,"names":[],"mappings":"","sources":["menu-table.js"],"sourcesContent":["'use strict'\n\nconst {\n\tapp,\n\tBrowserWindow,\n\tMenu,\n\tMenuItem,\n\tipcMain,\n\tshell,\n\tclipboard\n} = require( 'electron' )\n\nconst Store \t\t\t= require( 'electron-store' )\nconst store \t\t\t= new Store()\nconst detectBrowsers \t= require('detect-browsers')\n\nconst entities \t\t\t= require( './entities.min' )\nconst log \t\t\t\t= require( 'electron-log' )\n\n\n\nmodule.exports.menuBookmarks = function ( winId ) {\n\t\n\tconst i18n = require('./i18n.min')\n\t\n\tipcMain.on('show-bookmark-menu', ( event, message ) => {\n\t\t\n\t\tlet id \t\t= message[0],\n\t\t\ttitle \t= entities.decode(message[2])\n\t\t\n\t\tconst bookmarkMenuTemplate = [\n\t\t\t{\n\t\t\t\tlabel: i18n.t('menutable:bookmarks.open', 'Open {{- title}} in Default Browser', { title: title }),\n\t\t\t\tclick () { require('electron').shell.openExternal( message[4] ) }\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: i18n.t('menutable:bookmarks.with', 'Open {{- title}} with…', { title: title }),\n\t\t\t\tsubmenu: []\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: i18n.t('menutable:bookmarks.copy', 'Copy {{- title}} url to Clipboard', { title: title }),\n\t\t\t\tclick () { clipboard.writeText(message[4], title) }\t\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'separator'\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: i18n.t('menutable:bookmarks.edit', 'Edit {{- title}} Bookmark…', { title: title }),\n\t\t\t\tclick (item, focusedWindow) { if(focusedWindow) focusedWindow.webContents.send('edit-bookmark', message) }\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: i18n.t('menutable:bookmarks.delete', 'Delete {{- title}} Bookmark…', { title: title }),\n\t\t\t\tclick (item, focusedWindow) { if(focusedWindow) focusedWindow.webContents.send('delete-bookmark', [id, title]) }\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'separator'\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: i18n.t('menutable:bookmarks.addtofolder', 'Add to Folder…'),\n\t\t\t\tsubmenu: []\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: i18n.t('menutable:bookmarks.removefromfolder', 'Remove from Folder…'),\n\t\t\t\tsubmenu: []\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'separator'\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: i18n.t('menutable:bookmarks.info', 'Show / Hide Info…'),\n\t\t\t\tclick (item, focusedWindow) { if(focusedWindow) focusedWindow.webContents.send('info-bookmark', id) }\n\t\t\t},\n\t\t]\n\t\t\n\t\tlet browsers = store.get( 'browsers' )\n\t\t\n\t\tfor(let browser of browsers) {\n\t\t\t\n\t\t\tbookmarkMenuTemplate[1].submenu.push({\n\t\t\t\tlabel: browser.browser,\n\t\t\t\tclick () {\n\t\t\t\t\t\n\t\t\t\t\tdetectBrowsers.launchBrowser( browser, message[4] )\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t\t\n\t\tconst \tfolders \t= store.get( 'folders' ),\n\t\t\t\tfolderIds \t= message[9].split( ',' ).map( Number )\n\t\t\n\t\tif( !folderIds.includes( -1 ) ) {\n\t\t\t\n\t\t\tbookmarkMenuTemplate[7].submenu.push(\n\t\t\t\t{\n\t\t\t\t\tlabel: i18n.t('menutable:bookmarks.home', 'Home'),\n\t\t\t\t\tclick (item, focusedWindow) { if(focusedWindow) focusedWindow.webContents.send('move-bookmark',\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t'method': 'addtofolder',\n\t\t\t\t\t\t\t'bookmark_id': id,\n\t\t\t\t\t\t\t'folder_id': -1,\n\t\t\t\t\t\t\t'count': folderIds.length\n\t\t\t\t\t\t}\n\t\t\t\t\t)}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'separator'\n\t\t\t\t}\n\t\t\t)\n\t\t\n\t\t} else {\n\t\t\t\n\t\t\tbookmarkMenuTemplate[8].submenu.push(\n\t\t\t\t{\n\t\t\t\t\tlabel: i18n.t('menutable:bookmarks.home', 'Home'),\n\t\t\t\t\tclick (item, focusedWindow) { if(focusedWindow) focusedWindow.webContents.send('move-bookmark',\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t'method': 'deletefromfolder',\n\t\t\t\t\t\t\t'bookmark_id': id,\n\t\t\t\t\t\t\t'folder_id': -1,\n\t\t\t\t\t\t\t'count': folderIds.length\n\t\t\t\t\t\t}\n\t\t\t\t\t)}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'separator'\n\t\t\t\t}\n\t\t\t)\n\t\t}\n\t\t\n\t\tfor( let folder of folders ) {\n\t\t\n\t\t\tif( !folderIds.includes( folder.id )  ) {\n\t\t\n\t\t\t\tbookmarkMenuTemplate[7].submenu.push({\n\t\t\t\t\t\n\t\t\t\t\tlabel: folder.text,\n\t\t\t\t\tclick (item, focusedWindow) { if(focusedWindow) focusedWindow.webContents.send('move-bookmark',\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t'method': 'addtofolder',\n\t\t\t\t\t\t\t'bookmark_id': id,\n\t\t\t\t\t\t\t'folder_id': folder.id,\n\t\t\t\t\t\t\t'count': folderIds.length\n\t\t\t\t\t\t}\n\t\t\t\t\t)}\n\t\t\t\t})\n\t\t\t\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\tbookmarkMenuTemplate[8].submenu.push({\n\t\t\t\t\t\n\t\t\t\t\tlabel: folder.text,\n\t\t\t\t\tclick (item, focusedWindow) { if(focusedWindow) focusedWindow.webContents.send('move-bookmark',\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t'method': 'deletefromfolder',\n\t\t\t\t\t\t\t'bookmark_id': id,\n\t\t\t\t\t\t\t'folder_id': folder.id,\n\t\t\t\t\t\t\t'count': folderIds.length\n\t\t\t\t\t\t}\n\t\t\t\t\t)}\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\tconst bookmarkMenu = Menu.buildFromTemplate( bookmarkMenuTemplate )\n\t\t\n\t\tconst win = BrowserWindow.fromId( winId )\n\t\tbookmarkMenu.popup( win )\n\t})\n}\n\n\n\nmodule.exports.menuColumns = function ( winId ) {\n\t\n\tconst i18n = require('./i18n.min')\n\t\n\tipcMain.on('show-columns-menu', ( event, message ) => {\n\t\t\n\t\tlet settings = store.get( 'tableColumns' )\n\t\t\n\t\tconst columnsMenuTemplate = [\n\t\t\t{\n\t\t\t\tlabel: i18n.t('menutable:columns.description', 'Description'),\n\t\t\t\ttype: 'checkbox',\n\t\t\t\tchecked: settings.description,\n\t\t\t\tclick (item, focusedWindow) { if(focusedWindow) focusedWindow.webContents.send('toggle-column',\n\t\t\t\t\t{\n\t\t\t\t\t\t\"id\": 3,\n\t\t\t\t\t\t\"name\": \"description\",\n\t\t\t\t\t\t\"state\": settings.description\n\t\t\t\t\t}\n\t\t\t\t) }\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: i18n.t('menutable:columns.url', 'Url'),\n\t\t\t\ttype: 'checkbox',\n\t\t\t\tchecked: settings.url,\n\t\t\t\tclick (item, focusedWindow) { if(focusedWindow) focusedWindow.webContents.send('toggle-column',\n\t\t\t\t\t{\n\t\t\t\t\t\t\"id\": 4,\n\t\t\t\t\t\t\"name\": \"url\",\n\t\t\t\t\t\t\"state\": settings.url\n\t\t\t\t\t}\n\t\t\t\t) }\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: i18n.t('menutable:columns.created', 'Created'),\n\t\t\t\ttype: 'checkbox',\n\t\t\t\tchecked: settings.created,\n\t\t\t\tclick (item, focusedWindow) { if(focusedWindow) focusedWindow.webContents.send('toggle-column',\n\t\t\t\t\t{\n\t\t\t\t\t\t\"id\": 6,\n\t\t\t\t\t\t\"name\": \"created\",\n\t\t\t\t\t\t\"state\": settings.created\n\t\t\t\t\t}\n\t\t\t\t) }\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: i18n.t('menutable:columns.modified', 'Modified'),\n\t\t\t\ttype: 'checkbox',\n\t\t\t\tchecked: settings.modified,\n\t\t\t\tclick (item, focusedWindow) { if(focusedWindow) focusedWindow.webContents.send('toggle-column',\n\t\t\t\t\t{\n\t\t\t\t\t\t\"id\": 8,\n\t\t\t\t\t\t\"name\": \"modified\",\n\t\t\t\t\t\t\"state\": settings.modified\n\t\t\t\t\t}\n\t\t\t\t) }\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: i18n.t('menutable:columns.folders', 'Folders'),\n\t\t\t\ttype: 'checkbox',\n\t\t\t\tchecked: settings.folders,\n\t\t\t\tclick (item, focusedWindow) { if(focusedWindow) focusedWindow.webContents.send('toggle-column',\n\t\t\t\t\t{\n\t\t\t\t\t\t\"id\": 10,\n\t\t\t\t\t\t\"name\": \"folders\",\n\t\t\t\t\t\t\"state\": settings.folders\n\t\t\t\t\t}\n\t\t\t\t) }\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: i18n.t('menutable:columns.tags', 'Tags'),\n\t\t\t\ttype: 'checkbox',\n\t\t\t\tchecked: settings.tags,\n\t\t\t\tclick (item, focusedWindow) { if(focusedWindow) focusedWindow.webContents.send('toggle-column',\n\t\t\t\t\t{\n\t\t\t\t\t\t\"id\": 11,\n\t\t\t\t\t\t\"name\": \"tags\",\n\t\t\t\t\t\t\"state\": settings.tags\n\t\t\t\t\t}\n\t\t\t\t) }\n\t\t\t}\n\t\t]\n\t\t\n\t\tconst columnsMenu = Menu.buildFromTemplate( columnsMenuTemplate )\n\t\t\n\t\tconst win = BrowserWindow.fromId( winId )\n\t\tcolumnsMenu.popup( win )\n\t})\n}\n\n\n\nmodule.exports.menuPanels = function ( winId ) {\n\t\n\tconst i18n = require('./i18n.min')\n\t\n\tipcMain.on('show-panels-menu', ( event, message ) => {\n\t\t\n\t\tconst panelsMenuTemplate = [\n\t\t\t{\n\t\t\t\tlabel: i18n.t('menutable:panels.open', 'Open All'),\n\t\t\t\tclick (item, focusedWindow) { if(focusedWindow) focusedWindow.webContents.send('toggle-info-panels', 'open') }\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: i18n.t('menutable:panels.close', 'Close All'),\n\t\t\t\tclick (item, focusedWindow) { if(focusedWindow) focusedWindow.webContents.send('toggle-info-panels', 'close') }\n\t\t\t}\n\t\t]\n\t\t\n\t\tconst panelsMenu = Menu.buildFromTemplate( panelsMenuTemplate )\n\t\t\n\t\tconst win = BrowserWindow.fromId( winId )\n\t\tpanelsMenu.popup( win )\n\t})\n}\n"],"file":"../menu-table.min.js"}