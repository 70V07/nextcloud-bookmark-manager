{"version":3,"names":[],"mappings":"","sources":["export-bookmarks.js"],"sourcesContent":["'use strict'\n\nconst remote = require('electron').remote\nconst {ipcRenderer} = require( 'electron' )\nconst fs = require( 'fs-extra' )\nconst Store = require( 'electron-store' )\nconst store = new Store()\n\nconst dialog = remote.dialog\n\nconst \tserver \t\t= store.get( 'loginCredentials.server' ),\n\t\tusername \t= store.get( 'loginCredentials.username' ),\n\t\tpassword \t= store.get( 'loginCredentials.password' )\n\nlet today = new Date().toISOString().slice(0, 10)\nlet serverName = server.replace(/^(?:https?:\\/\\/)?(?:www\\.)?/i, \"\").split('/')[0]\n\nconst exportProcess = remote.getCurrentWindow()\nconst exportPath = store.get('exportPath')  + `/${serverName} Bookmarks (${today}).html`\n\n\nlet bookmarks =\n`<!DOCTYPE NETSCAPE-Bookmark-file-1>\n<META HTTP-EQUIV=\"Content-Type\" CONTENT=\"text/html; charset=UTF-8\">\n<TITLE>Bookmarks</TITLE>\n<H1>Bookmarks</H1>\n<DL><p>`\n\n\n\n//note(dgmid): log exceptions\n\nwindow.onerror = function( error, url, line ) {\n\t\n\tipcRenderer.send( 'error-in-render', {error, url, line} )\n}\n\n\n\nfunction getBookmarks() {\n\t\n\tconst getUrl = \"/index.php/apps/bookmarks/public/rest/v2/bookmark?page=-1\"\n\t\n\tlet getInit = {\n\t\t\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\t'Authorization': 'Basic ' + btoa( username + ':' + password ),\n\t\t\t'Content-Type': 'application/json'\n\t\t},\n\t\tmode: 'cors',\n\t\tcache: 'no-cache',\n\t\tcredentials: 'omit'\n\t}\n\t\n\t\n\tfetch(server + getUrl, getInit).then(function(response) {\n\t\t\n\t\tif (response.ok) {\n\t\t\t\n\t\t\tconsole.log('response OK')\n\t\t\treturn response.text()\n\t\t\n\t\t} else {\n\t\t\t\n\t\t\tdialog.showErrorBox(\n\t\t\t\t'Server connection error',\n\t\t\t\t`there was an error connecting to:\\n${server}`\n\t\t\t)\n\t\t\t\n\t\t\tconsole.log( response.error() )\n\t\t}\n\t\n\t}).then(function(message) {\n\t\t\n\t\tlet doc = JSON.parse(message)\n\t\t\n\n\t\tif (doc['status'] == 'error') {\n\t\t\t\n\t\t\tdialog.showErrorBox(\n\t\t\t\t'JSON parsing error',\n\t\t\t\t`An error occured parsing the bookmarks`\n\t\t\t)\n\t\t\t\n\t\t\tconsole.log(doc['message'])\t\n\t\t\n\t\t} else {\n\t\t\t\t\t\t\n\t\t\toutputBookmarks( doc.data )\n\t\t}\n\t\n\t}).catch(function(error) {\n\t\t\n\t\tdialog.showErrorBox(\n\t\t\t'Server connection error',\n\t\t\t`there was an error connecting to:\\n${server}`\n\t\t)\n\t\t\n\t\tconsole.log(error)\n\t})\n}\n\n\n\nfunction outputBookmarks( array ) {\n\t\n\tfor ( let item of array ) {\n\t\t\n\t\tlet tagList = item.tags.toString()\n\t\t\n\t\tbookmarks +=\n`\n<DT><A HREF=\"${item.url}\" TAGS=\"${tagList}\">${item.title}</A>`\n\t\t\n\t\tif( item.description ) {\n\t\t\t\n\t\t\tbookmarks += `<DD>${item.description}`\n\t\t}\n\t}\n\t\n\t\n\tfs.outputFile( exportPath, bookmarks )\n\n\t.then(() => fs.readFile( exportPath, 'utf8') )\n\t\n\t.then(data => {\n\t\t\n\t\tlet exportNotification = new Notification('Export Successful', {\n\t\t\t\n\t\t\tbody: 'The bookmarks have been exported.'\n\t\t})\n\t\t\n\t\texportNotification.onclick = () => {\n\t\t\t\n\t\t\texportProcess.close()\n\t\t}\n\t})\n\t\n\t.catch(err => {\n\t\t\n\t\tconsole.error(err)\n\t\t\n\t\tlet exportNotification = new Notification('Export Failed', {\n\t\t\t\n\t\t\tbody: 'An error occured exporting the bookmarks.'\n\t\t})\n\t\t\n\t\texportNotification.onclick = () => {\n\t\t\t\n\t\t\texportProcess.close()\n\t\t}\n\t})\n}\n\ngetBookmarks()\n"],"file":"../export-bookmarks.min.js"}