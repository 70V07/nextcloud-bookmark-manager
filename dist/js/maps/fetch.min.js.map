{"version":3,"names":[],"mappings":"","sources":["fetch.js"],"sourcesContent":["'use strict'\n\nconst { remote }\t= require( 'electron' )\nconst ipc \t\t\t= require( 'electron' ).ipcRenderer\nconst dialog\t\t= remote.dialog\nconst Store\t\t\t= require( 'electron-store' )\nconst store\t\t\t= new Store()\nconst $\t\t\t\t= require( 'jquery' )\nconst log\t\t\t= require( 'electron-log' )\n\n\n\nlet bookmarkFile = new Store({\n\t\n\tname: 'bookmarks',\n\tdefaults: {\n\t\tdata: null\n\t}\n})\n\n\n\nconst path = '/index.php/apps/bookmarks/public/rest/v2'\nconst calltype = {\n\t\n\t'all': {\n\t\t'method': 'GET',\n\t\t'url': '/bookmark?page=-1'\t\n\t},\n\t'single': {\n\t\t'method': 'GET',\n\t\t'url': '/bookmark/'\n\t},\n\t'add': {\n\t\t'method': 'POST',\n\t\t'url': '/bookmark?'\n\t},\n\t'modify': {\n\t\t'method': 'PUT',\n\t\t'url': '/bookmark/',\n\t},\n\t'delete': {\n\t\t'method': 'DELETE',\n\t\t'url': '/bookmark/'\n\t},\n\t'modifytag': {\n\t\t'method': 'POST',\n\t\t'url': '/tag?'\n\t},\n\t'deletetag': {\n\t\t'method': 'DELETE',\n\t\t'url': '/tag?old_name='\n\t}\n}\n\n\n\nmodule.exports.bookmarksApi = function( call, id, data, callback ) {\n\t\n\tlet server \t\t= store.get( 'loginCredentials.server' ),\n\t\tusername \t= store.get( 'loginCredentials.username' ),\n\t\tpassword \t= store.get( 'loginCredentials.password' )\n\t\n\tlet init = {\n\t\t\n\t\tmethod: calltype[call]['method'],\n\t\theaders: {\n\t\t\t'Authorization': 'Basic ' + btoa( username + ':' + password ),\n\t\t\t'Content-Type': 'application/json'\n\t\t},\n\t\tmode: 'cors',\n\t\tcache: 'no-cache',\n\t\tcredentials: 'omit'\n\t}\n\t\n\t// modifytag /index.php/apps/bookmarks/public/rest/v2/tag?${data}\n\t// deletetag /index.php/apps/bookmarks/public/rest/v2/\n\t\n\tlet url = `${path}${calltype[call]['url']}${id}${data}`\n\t\n\tlog.info(`${call} : ${url}`)\n\t\n\tfetch(server + url, init)\n\t.then(function(response) {\n\t\t\n\t\tif(!response.ok) {\n\t\t\t\n\t\t\tlog.warn(`fetch error: ${response.status} - ${response.statusText}`)\n\t\t\tlet errTxt = response.status\n\t\t\tthrow Error( `${response.status} ${errTxt}` )\n\t\t\t\n\t\t} else {\n\t\t\n\t\t\tlog.info( `response ok` )\n\t\t\treturn response.text()\n\t\t}\n\t\t\n\t}).then(function(message) {\n\t\t\n\t\tswitch( call ) {\n\t\t\t\n\t\t\tcase 'all':\n\t\t\t\t\n\t\t\t\tlet doc = JSON.parse(message)\n\t\t\t\t\n\t\t\t\tif (doc['status'] == 'error') {\n\t\t\t\t\t\n\t\t\t\t\tdialog.showErrorBox(\n\t\t\t\t\t\t`JSON parsing error`,\n\t\t\t\t\t\t`An error occured parsing the bookmarks`\n\t\t\t\t\t)\n\t\t\t\t\t\n\t\t\t\t\tlog.error(doc['message'])\n\t\t\t\t\n\t\t\t\t} else {\n\t\t\t\t\t\n\t\t\t\t\tcallback( doc.data )\n\t\t\t\t\tbookmarkFile.set('data', doc.data)\n\t\t\t\t}\n\t\t\t\t\n\t\t\tbreak\n\t\t\t\n\t\t\tcase 'single': callback( message )\n\t\t\tbreak\n\t\t\t\n\t\t\tdefault: callback()\n\t\t}\n\t\t\n\t}).catch(function( error ) {\n\t\t\n\t\tlog.error(error)\n\t\t\n\t\tdialog.showErrorBox(\n\t\t\t`Error`,\n\t\t\t`problem retrieving:\\n${server}${url}\\n\\n${error}`\n\t\t)\n\t})\n}\n"],"file":"../fetch.min.js"}