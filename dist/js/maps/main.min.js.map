{"version":3,"sources":["main.js"],"names":["app","BrowserWindow","ipcMain","protocol","require","url","path","dialog","Store","getAvailableBrowsers","win","loginFlow","exportProcess","store","name","defaults","windowBounds","width","height","x","y","tableColumns","description","created","modified","loginCredentials","server","username","password","exportPath","getPath","tags","browsers","createWindow","get","saveWindowBounds","set","getBounds","show","titleBarStyle","minWidth","minHeight","backgroundColor","icon","join","__dirname","setSheetOffset","loadURL","format","pathname","slashes","once","on","quit","browserList","results","browser","push","registerFileProtocol","request","callback","split","user","replace","pass","close","webContents","send","reload","error","console","event","message","resizable","webPreferences","nodeIntegration","userAgent","extraHeaders","showOpenDialog","defaultPath","buttonLabel","properties"],"mappings":"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","file":"../main.min.js","sourcesContent":["'use strict'\n\nconst {app, BrowserWindow, ipcMain, protocol} = require('electron')\nconst url = require('url') \nconst path = require('path')\nconst dialog = require('electron').dialog\nconst Store = require('electron-store')\n\nconst getAvailableBrowsers = require('detect-installed-browsers').getAvailableBrowsers\n\nlet win,\n\tloginFlow,\n\texportProcess\n\n\n\nlet store = new Store({\n\tname: 'config',\n\tdefaults: {\n\t\t\n\t\twindowBounds: {\n\t\t\twidth: 1000,\n\t\t\theight: 700,\n\t\t\tx: 0,\n\t\t\ty: 0\n\t\t},\n\t\t\n\t\ttableColumns: {\n\t\t\t\n\t\t\tdescription: true,\n\t\t\turl: true,\n\t\t\tcreated: false,\n\t\t\tmodified: false\n\t\t},\n\t\t\n\t\tloginCredentials: {\n\t\t\t\n\t\t\tserver: '',\n\t\t\tusername: '',\n\t\t\tpassword: ''\n\t\t},\n\t\t\n\t\texportPath: app.getPath('desktop'),\n\t\t\n\t\ttags: null,\n\t\t\n\t\tbrowsers: null\n\t}\n})\n\n\n\nfunction createWindow() {\n\t\n\tlet { x, y, width, height } = store.get('windowBounds')\n\t\n\twin = new BrowserWindow({\n\t\tshow: false,\n\t\ttitleBarStyle: 'hidden',\n\t\tx: x,\n\t\ty: y,\n\t\twidth: width,\n\t\theight: height,\n\t\tminWidth: 460,\n\t\tminHeight: 396,\n\t\tbackgroundColor: '#fff',\n\t\ticon: path.join(__dirname, '../assets/icon/Icon.icns')\n\t})\n\t\n\twin.setSheetOffset( 24 )\n\t\n\tfunction saveWindowBounds() {\n\t\t\n\t\tstore.set('windowBounds', win.getBounds())\n\t}\n\t\n\twin.loadURL(url.format ({ \n\t\t\n\t\tpathname: path.join(__dirname, '../html/app.html'), \n\t\tprotocol: 'file:', \n\t\tslashes: true \n\t}))\n\t\n\twin.once('ready-to-show', () => {\n\t\t\n\t\twin.show()\n\t})\n\t\n\twin.on('resize', saveWindowBounds)\n\twin.on('move', saveWindowBounds)\n\t\n\twin.on('closed', () => {\n\t\t\n\t\tapp.quit()\n\t})\n\t\n\trequire( './app-menu.min' )\n\trequire( './context-menu.min' )\n\trequire( './tags-menu.min' )\n\t\n\tgetAvailableBrowsers( {}, ( browserList ) => {\n\t\t\n\t\tlet results = []\n\t\t\n\t\tfor ( let browser of browserList ) {\n\t\t\t\n\t\t\tresults.push( { \"name\": browser.name } )\n\t\t\tstore.set('browsers', results )\n\t\t}\n\t})\n\t\n\tprotocol.registerFileProtocol('nc', (request, callback) => {\n\t\t\n\t\tconst url = request.url.split( '&' )\n\t\t\n\t\tconst \tuser = url[1].replace('user:', ''),\n\t\t\t\tpass = url[2].replace('password:', '')\n\t\t\n\t\tstore.set( 'loginCredentials.username', user )\n\t\tstore.set( 'loginCredentials.password', pass )\n\t\t\n\t\tloginFlow.close()\n\t\t\n\t\twin.webContents.send('close-login-modal', 'close-login-modal')\n\t\twin.reload()\n\t\n\t}, (error) => {\n\t\n\t\tif (error) console.error('Failed to register protocol')\n\t})\n}\n\napp.on('ready', createWindow) \n\n\n\nipcMain.on('refresh', (event, message) => {\n\t\n\twin.webContents.send('refresh-bookmarks', 'refresh')\n})\n\n\n\nipcMain.on('reload', (event, message) => {\n\t\n\twin.reload()\n})\n\n\n\nipcMain.on('loginflow', (event, message) => {\n\t\n\tloginFlow = new BrowserWindow({\n\t\t\n\t\twidth: 800,\n\t\theight: 600,\n\t\tresizable: false,\n\t\tshow: false,\n\t\ttitleBarStyle: 'hidden',\n\t\tbackgroundColor: '#0082c9',\n\t\twebPreferences: {\n\t\t\tnodeIntegration: false\n\t\t}\n\t})\n\t\n\t\n\tloginFlow.loadURL( message + '/index.php/login/flow' , {\n\t\t\n\t\tuserAgent: 'Nextcloud Bookmark Manager - Macintosh',\n\t\textraHeaders: 'OCS-APIRequest: true'\n\t})\n\t\n\t\n\tloginFlow.once('ready-to-show', () => {\n\t\t\n\t\tloginFlow.show()\n\t})\n})\n\n\n\napp.on('export', (message) => {\n\t\n\tconst exportPath = store.get('exportPath')\n\t\n\tdialog.showOpenDialog(win, {\n\t\t\t\n\t\t\tdefaultPath: exportPath + '/',\n\t\t\tbuttonLabel: 'Export Bookmarks',\n\t\t\tproperties: [\t'openDirectory',\n\t\t\t\t\t\t\t'createDirectory'\n\t\t\t\t\t\t]\n\t\t},\t\t\n\t\t\n\t\trunExportProcess\n\t)\n\t\n\t\n\tfunction runExportProcess( exportPath ) {\n\t\t\n\t\tif( exportPath ) {\n\t\t\t\n\t\t\tstore.set('exportPath', exportPath)\n\t\t\t\n\t\t\tconst exportProcess = new BrowserWindow({ show: false })\n\t\t\t\n\t\t\texportProcess.loadURL(url.format ({ \n\t\t\t\t\n\t\t\t\tpathname: path.join(__dirname, '../html/export-bookmarks.html'), \n\t\t\t\tprotocol: 'file:', \n\t\t\t\tslashes: true \n\t\t\t}))\n\t\t}\n\t}\n})\n"]}